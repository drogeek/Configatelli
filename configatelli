#!/usr/bin/python3

from pathlib import Path
from contextlib import contextmanager
import xml.etree.ElementTree as etree
import os
from subprocess import call
import argparse as ap

@contextmanager
def cd(path):
    try:
        old=os.getcwd()
        os.chdir(path)
        yield
    finally:
        os.chdir(old)

name_file_location = '.configatelli'
alreadyExist = lambda root,location,name : root.find('.//entry/[name="{}"][location="{}"]'.format(name,location)) != None

CONF_LOC = Path.home().joinpath(name_file_location)
if CONF_LOC.exists():
    PATH = CONF_LOC.read_text() 
else:
    print("{} doesn't exist".format(name_file_location))
    print("creating it")
    PATH = Path.cwd().as_posix()
    CONF_LOC.write_text(PATH)

OUTPUT_FILE = 'locations.xml'
PASSWORD_FILE = '.passwd.txt'

def store(args):
   with cd(PATH):
        for f in args.file:
            file_path = Path(f).parent.resolve().as_posix()
            file_name = Path(f).name

            #test if the password exists
            passwd_file = Path.cwd().joinpath(PASSWORD_FILE)
            if passwd_file.exists():
                passwd=passwd_file.read_text()
            #creation of passwd to encrypt
            else:
                print('ko')
            
            #creation of OUTPUT_FILE
            if not Path(OUTPUT_FILE).exists():
                root = etree.Element('config')
                with open(OUTPUT_FILE,'xb') as f:
                    f.write(etree.tostring(root))
            tree = etree.parse(OUTPUT_FILE)
            root = tree.getroot()

            if alreadyExist(root,file_path,file_name):
                if args.yes or input('The file exists already, do you want to update it? [y/n]: ') == 'y':
                    call(['cp', Path(f).resolve().as_posix(), '.'])
                    print('{} updated'.format(file_name))

            else:
                entryelem = etree.SubElement(root,'entry')
                locationelem = etree.SubElement(entryelem,'location')
                locationelem.text = file_path
                nameelem = etree.SubElement(entryelem,'name')
                nameelem.text = file_name
                encrypelem = etree.SubElement(entryelem,'encrypted')
                encrypelem.text = str(args.encrypt)
                tree.write(OUTPUT_FILE)
                print('copying file {}'.format(file_name))
                call(['cp', Path(f).resolve().as_posix(), '.'])
def deploy(args):
    print("deploying")

mainparser = ap.ArgumentParser(prog="configatelli", description="manage your config files")
subparser = mainparser.add_subparsers(help="subcommand help")

store_parser = subparser.add_parser('store', help="storeing a config")
store_parser.add_argument("file", nargs='+', help="the files to store")
store_parser.add_argument("-e", "--encrypt", help="encrypt the file", action="store_true")
store_parser.add_argument("-y", "--yes", help="automatically update the file if it exists", action="store_true")
store_parser.set_defaults(func=store)

deploy_parser = subparser.add_parser('deploy', help="deploy config files")
deploy_parser.add_argument("-v", "--verbose", action="store_true")
deploy_parser.set_defaults(func=deploy)

args = mainparser.parse_args()
args.func(args)

